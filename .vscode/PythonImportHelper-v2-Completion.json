[
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Dispatcher",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Dispatcher",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "MemoryStorage",
        "importPath": "aiogram.contrib.fsm_storage.memory",
        "description": "aiogram.contrib.fsm_storage.memory",
        "isExtraImport": true,
        "detail": "aiogram.contrib.fsm_storage.memory",
        "documentation": {}
    },
    {
        "label": "MemoryStorage",
        "importPath": "aiogram.contrib.fsm_storage.memory",
        "description": "aiogram.contrib.fsm_storage.memory",
        "isExtraImport": true,
        "detail": "aiogram.contrib.fsm_storage.memory",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.dispatcher",
        "description": "aiogram.dispatcher",
        "isExtraImport": true,
        "detail": "aiogram.dispatcher",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.dispatcher",
        "description": "aiogram.dispatcher",
        "isExtraImport": true,
        "detail": "aiogram.dispatcher",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "aiogram.dispatcher.filters.state",
        "description": "aiogram.dispatcher.filters.state",
        "isExtraImport": true,
        "detail": "aiogram.dispatcher.filters.state",
        "documentation": {}
    },
    {
        "label": "StatesGroup",
        "importPath": "aiogram.dispatcher.filters.state",
        "description": "aiogram.dispatcher.filters.state",
        "isExtraImport": true,
        "detail": "aiogram.dispatcher.filters.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "aiogram.dispatcher.filters.state",
        "description": "aiogram.dispatcher.filters.state",
        "isExtraImport": true,
        "detail": "aiogram.dispatcher.filters.state",
        "documentation": {}
    },
    {
        "label": "StatesGroup",
        "importPath": "aiogram.dispatcher.filters.state",
        "description": "aiogram.dispatcher.filters.state",
        "isExtraImport": true,
        "detail": "aiogram.dispatcher.filters.state",
        "documentation": {}
    },
    {
        "label": "KeyboardButton",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ParseMode",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ReplyKeyboardMarkup",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "KeyboardButton",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ParseMode",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ReplyKeyboardMarkup",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "CallbackData",
        "importPath": "aiogram.utils.callback_data",
        "description": "aiogram.utils.callback_data",
        "isExtraImport": true,
        "detail": "aiogram.utils.callback_data",
        "documentation": {}
    },
    {
        "label": "CallbackData",
        "importPath": "aiogram.utils.callback_data",
        "description": "aiogram.utils.callback_data",
        "isExtraImport": true,
        "detail": "aiogram.utils.callback_data",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "WeatherState",
        "kind": 6,
        "importPath": "__pycache__.main",
        "description": "__pycache__.main",
        "peekOfCode": "class WeatherState(StatesGroup):\n    \"\"\"Класс для прогноза погоды.\"\"\"\n    waiting_for_city = State()\n@dp.message_handler(commands=[\"weather\"])\nasync def process_weather_command(message: types.Message):\n    \"\"\"Обработчик сообщения для прогноза погоды.\"\"\"\n    await message.answer(\"Введи название города:\")\n    await WeatherState.waiting_for_city.set()\nasync def get_weather(city, message: types.Message):\n    \"\"\"Осуществляет запросы к API OpenWeather.\"\"\"",
        "detail": "__pycache__.main",
        "documentation": {}
    },
    {
        "label": "ExchangeState",
        "kind": 6,
        "importPath": "__pycache__.main",
        "description": "__pycache__.main",
        "peekOfCode": "class ExchangeState(StatesGroup):\n    \"\"\"Клас для конвертации валют.\"\"\"\n    waiting_for_from = State()\n    waiting_for_to = State()\n    waiting_for_amount = State()\n@dp.message_handler(commands=[\"exchange\"])\nasync def process_currency_command(message: types.Message):\n    \"\"\"Обработчик первого сообщения для конвертации.\"\"\"\n    await message.answer(\n        \"Введи валюту, из который ты хочешь перевести. Например, EUR:\"",
        "detail": "__pycache__.main",
        "documentation": {}
    },
    {
        "label": "CreatePollStates",
        "kind": 6,
        "importPath": "__pycache__.main",
        "description": "__pycache__.main",
        "peekOfCode": "class CreatePollStates(StatesGroup):\n    \"\"\"Класс для создания опросов.\"\"\"\n    question = State()\n    number_of_options = State()\n    options = State()\n@dp.message_handler(commands=[\"polls\"])\nasync def process_polls(message: types.Message):\n    \"\"\"Обрабатывает сообщение с вопросом к опросу.\"\"\"\n    await message.answer(\"Введите вопрос для опроса:\")\n    await CreatePollStates.question.set()",
        "detail": "__pycache__.main",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "__pycache__.main",
        "description": "__pycache__.main",
        "peekOfCode": "bot = Bot(token=os.getenv(\"BOT_TOKEN\"))\nAPI_WEATHER_KEY = os.getenv(\"API_WEATHER_KEY\")\nAPILayer = os.getenv(\"APILayer\")\ndp = Dispatcher(bot, storage=MemoryStorage())\nlogging.basicConfig(\n    format=(\n        \"%(asctime)s, %(name)s, %(levelname)s, %(filename)s, %(funcName)s, %(message)s\"\n    ),\n    level=logging.INFO,\n)",
        "detail": "__pycache__.main",
        "documentation": {}
    },
    {
        "label": "API_WEATHER_KEY",
        "kind": 5,
        "importPath": "__pycache__.main",
        "description": "__pycache__.main",
        "peekOfCode": "API_WEATHER_KEY = os.getenv(\"API_WEATHER_KEY\")\nAPILayer = os.getenv(\"APILayer\")\ndp = Dispatcher(bot, storage=MemoryStorage())\nlogging.basicConfig(\n    format=(\n        \"%(asctime)s, %(name)s, %(levelname)s, %(filename)s, %(funcName)s, %(message)s\"\n    ),\n    level=logging.INFO,\n)\nmenu_callback = CallbackData(\"menu\", \"command\")",
        "detail": "__pycache__.main",
        "documentation": {}
    },
    {
        "label": "APILayer",
        "kind": 5,
        "importPath": "__pycache__.main",
        "description": "__pycache__.main",
        "peekOfCode": "APILayer = os.getenv(\"APILayer\")\ndp = Dispatcher(bot, storage=MemoryStorage())\nlogging.basicConfig(\n    format=(\n        \"%(asctime)s, %(name)s, %(levelname)s, %(filename)s, %(funcName)s, %(message)s\"\n    ),\n    level=logging.INFO,\n)\nmenu_callback = CallbackData(\"menu\", \"command\")\n@dp.message_handler(commands=[\"start\"])",
        "detail": "__pycache__.main",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "__pycache__.main",
        "description": "__pycache__.main",
        "peekOfCode": "dp = Dispatcher(bot, storage=MemoryStorage())\nlogging.basicConfig(\n    format=(\n        \"%(asctime)s, %(name)s, %(levelname)s, %(filename)s, %(funcName)s, %(message)s\"\n    ),\n    level=logging.INFO,\n)\nmenu_callback = CallbackData(\"menu\", \"command\")\n@dp.message_handler(commands=[\"start\"])\nasync def welcome_message(message: types.Message):",
        "detail": "__pycache__.main",
        "documentation": {}
    },
    {
        "label": "menu_callback",
        "kind": 5,
        "importPath": "__pycache__.main",
        "description": "__pycache__.main",
        "peekOfCode": "menu_callback = CallbackData(\"menu\", \"command\")\n@dp.message_handler(commands=[\"start\"])\nasync def welcome_message(message: types.Message):\n    \"\"\"Обработчик команды start.\"\"\"\n    menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(\n        KeyboardButton(text=\"\\U000026C5 Погода\"),\n        KeyboardButton(text=\"\\U0001F4B5 Курс валют\"),\n        KeyboardButton(text=\"\\U0001F436 Милые животные\"),\n        KeyboardButton(text=\"\\U0001F4D2 Опрос\"),\n    )",
        "detail": "__pycache__.main",
        "documentation": {}
    },
    {
        "label": "WeatherState",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class WeatherState(StatesGroup):\n    \"\"\"Класс для прогноза погоды.\"\"\"\n    waiting_for_city = State()\n@dp.message_handler(commands=[\"weather\"])\nasync def process_weather_command(message: types.Message):\n    \"\"\"Обработчик сообщения для прогноза погоды.\"\"\"\n    await message.answer(\"Введи название города:\")\n    await WeatherState.waiting_for_city.set()\nasync def get_weather(city, message: types.Message):\n    \"\"\"Осуществляет запросы к API OpenWeather.\"\"\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ExchangeState",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class ExchangeState(StatesGroup):\n    \"\"\"Клас для конвертации валют.\"\"\"\n    waiting_for_from = State()\n    waiting_for_to = State()\n    waiting_for_amount = State()\n@dp.message_handler(commands=[\"exchange\"])\nasync def process_currency_command(message: types.Message):\n    \"\"\"Обработчик первого сообщения для конвертации.\"\"\"\n    await message.answer(\n        \"Введи валюту, из который ты хочешь перевести. Например, EUR:\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "CreatePollStates",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class CreatePollStates(StatesGroup):\n    \"\"\"Класс для создания опросов.\"\"\"\n    question = State()\n    number_of_options = State()\n    options = State()\n@dp.message_handler(commands=[\"polls\"])\nasync def process_polls(message: types.Message):\n    \"\"\"Обрабатывает сообщение с вопросом к опросу.\"\"\"\n    await message.answer(\"Введите вопрос для опроса:\")\n    await CreatePollStates.question.set()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "bot = Bot(token=os.getenv(\"BOT_TOKEN\"))\nAPI_WEATHER_KEY = os.getenv(\"API_WEATHER_KEY\")\nAPILayer = os.getenv(\"APILayer\")\ndp = Dispatcher(bot, storage=MemoryStorage())\nlogging.basicConfig(\n    format=(\n        \"%(asctime)s, %(name)s, %(levelname)s, %(filename)s, %(funcName)s, %(message)s\"\n    ),\n    level=logging.INFO,\n)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "API_WEATHER_KEY",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "API_WEATHER_KEY = os.getenv(\"API_WEATHER_KEY\")\nAPILayer = os.getenv(\"APILayer\")\ndp = Dispatcher(bot, storage=MemoryStorage())\nlogging.basicConfig(\n    format=(\n        \"%(asctime)s, %(name)s, %(levelname)s, %(filename)s, %(funcName)s, %(message)s\"\n    ),\n    level=logging.INFO,\n)\nmenu_callback = CallbackData(\"menu\", \"command\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "APILayer",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "APILayer = os.getenv(\"APILayer\")\ndp = Dispatcher(bot, storage=MemoryStorage())\nlogging.basicConfig(\n    format=(\n        \"%(asctime)s, %(name)s, %(levelname)s, %(filename)s, %(funcName)s, %(message)s\"\n    ),\n    level=logging.INFO,\n)\nmenu_callback = CallbackData(\"menu\", \"command\")\n@dp.message_handler(commands=[\"start\"])",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "dp = Dispatcher(bot, storage=MemoryStorage())\nlogging.basicConfig(\n    format=(\n        \"%(asctime)s, %(name)s, %(levelname)s, %(filename)s, %(funcName)s, %(message)s\"\n    ),\n    level=logging.INFO,\n)\nmenu_callback = CallbackData(\"menu\", \"command\")\n@dp.message_handler(commands=[\"start\"])\nasync def welcome_message(message: types.Message):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "menu_callback",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "menu_callback = CallbackData(\"menu\", \"command\")\n@dp.message_handler(commands=[\"start\"])\nasync def welcome_message(message: types.Message):\n    \"\"\"Обработчик команды start.\"\"\"\n    menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(\n        KeyboardButton(text=\"\\U000026C5 Погода\"),\n        KeyboardButton(text=\"\\U0001F4B5 Курс валют\"),\n        KeyboardButton(text=\"\\U0001F436 Милые животные\"),\n        KeyboardButton(text=\"\\U0001F4D2 Опрос\"),\n    )",
        "detail": "main",
        "documentation": {}
    }
]